generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  firstName       String           @db.VarChar(100)
  lastName        String           @db.VarChar(100)
  email           String           @unique @db.VarChar(100)
  password        String           @db.VarChar(255)
  createdAt       DateTime         @default(now()) @db.Timestamp(0)
  certifications  Certification[]
  cvs             Cv?
  educations      Education[]
  languages       Language[]
  personalInfo    PersonalInfo?
  projects        Project[]
  softSkills      SoftSkill[]
  technicalSkills TechnicalSkill[]
  testResults     TestResult[]
  volunteers      Volunteer[]
  workExperiences WorkExperience[]
}

model PersonalInfo {
  id           String    @id @default(uuid())
  userId       String    @unique
  firstName    String?   @db.VarChar(100)
  lastName     String?   @db.VarChar(100)
  dateOfBirth  DateTime?
  aboutMe      String?
  email        String?   @db.VarChar(100)
  phoneNumber  String?   @db.VarChar(20)
  linkedin     String?   @db.VarChar(255)
  website      String?   @db.VarChar(255)
  addressLine1 String?   @db.VarChar(255)
  addressLine2 String?   @db.VarChar(255)
  city         String?   @db.VarChar(100)
  country      String?   @db.VarChar(100)
  image        String?   @db.VarChar(255)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cv {
  id          String   @id @default(uuid())
  userId      String   @unique
  title       String   @db.VarChar(100)
  content     String
  templateId  String   // This line references the template
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @updatedAt @db.Timestamp(0)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template    Template @relation(fields: [templateId], references: [id]) // This line establishes the relation
}

model Template {
  id    String  @id @default(uuid())
  name  String  @db.VarChar(100) @unique
  cvs   Cv[]
}

model Education {
  id           String    @id @default(uuid())
  userId       String
  credential   String    @db.VarChar(100)
  organization String    @db.VarChar(100)
  city         String?   @db.VarChar(100)
  country      String?   @db.VarChar(100)
  from         DateTime?
  to           DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id          String    @id @default(uuid())
  userId      String
  position    String    @db.VarChar(100)
  company     String    @db.VarChar(100)
  city        String?   @db.VarChar(100)
  country     String?   @db.VarChar(100)
  from        DateTime?
  to          DateTime?
  description String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TechnicalSkill {
  id     String  @id @default(uuid())
  userId String
  group  String? @db.VarChar(100)
  skill  String? @db.VarChar(100)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SoftSkill {
  id     String @id @default(uuid())
  userId String
  skill  String @db.VarChar(100)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certification {
  id     String    @id @default(uuid())
  userId String
  name   String    @db.VarChar(100)
  from   DateTime?
  to     DateTime?
  link   String?
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Language {
  id          String  @id @default(uuid())
  userId      String
  langName    String  @db.VarChar(100)
  proficiency String? @db.VarChar(50)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String    @id @default(uuid())
  userId      String
  title       String    @db.VarChar(100)
  from        DateTime?
  to          DateTime?
  description String?
  link        String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TestResult {
  id        String   @id @default(uuid())
  userId    String
  testName  String   @db.VarChar(100)
  score     Float
  dateTaken DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Volunteer {
  id           String    @id @default(uuid())
  userId       String
  organization String    @db.VarChar(100)
  role         String    @db.VarChar(100)
  description  String?
  from         DateTime?
  to           DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}