// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         BigInt       @id @default(autoincrement())
  firstName  String       @db.VarChar(100)
  lastName   String       @db.VarChar(100)
  email      String       @unique @db.VarChar(100)
  password   String       @db.VarChar(255)
  createdAt  DateTime     @default(now()) @db.Timestamp(0)
  personalInfo PersonalInfo[]
  cvs        Cv[]
  educations Education[]
  workExperiences WorkExperience[]
  technicalSkills TechnicalSkill[]
  softSkills SoftSkill[]
  certifications Certification[]
  languages  Language[]
  projects   Project[]
}

model PersonalInfo {
  id           BigInt    @id @default(autoincrement())
  userId       BigInt
  firstName    String?   @db.VarChar(100)
  lastName     String?   @db.VarChar(100)
  dateOfBirth  DateTime?
  aboutMe      String?
  email        String?   @db.VarChar(100)
  phoneNumber  String?   @db.VarChar(20)
  linkedin     String?   @db.VarChar(255)
  website      String?   @db.VarChar(255)
  addressLine1 String?   @db.VarChar(255)
  addressLine2 String?   @db.VarChar(255)
  city         String?   @db.VarChar(100)
  country      String?   @db.VarChar(100)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cv {
  id         BigInt    @id @default(autoincrement())
  userId     BigInt
  title      String    @db.VarChar(100)
  content    String
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  updatedAt  DateTime  @updatedAt @db.Timestamp(0)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id           BigInt    @id @default(autoincrement())
  userId       BigInt
  credential   String    @db.VarChar(100)
  organization String    @db.VarChar(100)
  city         String?   @db.VarChar(100)
  country      String?   @db.VarChar(100)
  from         DateTime?
  to           DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id           BigInt    @id @default(autoincrement())
  userId       BigInt
  position     String    @db.VarChar(100)
  company      String    @db.VarChar(100)
  city         String?   @db.VarChar(100)
  country      String?   @db.VarChar(100)
  from         DateTime?
  to           DateTime?
  description  String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TechnicalSkill {
  id       BigInt    @id @default(autoincrement())
  userId   BigInt
  group    String?   @db.VarChar(100)
  skill    String?   @db.VarChar(100)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SoftSkill {
  id       BigInt    @id @default(autoincrement())
  userId   BigInt
  skill    String    @db.VarChar(100)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certification {
  id       BigInt    @id @default(autoincrement())
  userId   BigInt
  name     String    @db.VarChar(100)
  from     DateTime?
  to       DateTime?
  link     String?
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Language {
  id           BigInt    @id @default(autoincrement())
  userId       BigInt
  langName     String    @db.VarChar(100)
  proficiency  String?   @db.VarChar(50)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt
  title       String    @db.VarChar(100)
  from        DateTime?
  to          DateTime?
  description String?
  link        String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}